{"version":3,"sources":["components/Navigation.js","myFirebase.js","images/google.png","images/github.png","components/AuthFromSocial.js","images/twitter.png","routes/Auth.js","components/CreateTweet.js","components/Tweet.js","routes/Home.js","components/EditProfile.js","components/MyTweet.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["Navigation","signedInUser","className","to","icon","faHome","size","id","faUser","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","authService","getAuth","dbService","getFirestore","storageService","getStorage","AuthFromSocial","onSocialClick","event","a","target","name","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","alert","message","onClick","src","Google","alt","width","height","Github","Auth","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onInputChange","value","onSignInSubmit","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","slice","mainLogo","onSubmit","htmlFor","type","placeholder","onChange","prev","CreateTweet","tweet","setTweet","attachment","setAttachment","onTweetSubmit","attachmentUrl","attachmentRef","ref","uid","uuidv4","uploadString","uploadImg","getDownloadURL","addDoc","collection","text","createdAt","Date","now","creatorId","likes","maxLength","require","faImage","accept","selectedFile","files","reader","FileReader","onloadend","result","readAsDataURL","faPencilAlt","Tweet","tweetObj","isOwner","isEditing","setIsEditing","newTweet","setNewTweet","onDeleteClick","OK","window","confirm","deleteDoc","doc","deleteObject","onNewTweetSubmit","updateDoc","required","photoURL","displayName","date","getFullYear","getMonth","getDate","getHours","getMinutes","getTweetDate","faEdit","faTrashAlt","Home","tweetList","setTweetList","useEffect","tweets","query","orderBy","unsubscribe","onSnapshot","snapshot","tweetArr","docs","map","data","EditProfile","refreshUser","newPhotoURL","setNewPhotoURL","newDisplayName","setNewDisplayName","userBio","setUserBio","onInputTextChange","onFormSubmit","photoURLRef","updateProfile","currentUser","setDoc","selectedImg","MyTweet","myTweets","setMyTweets","getMyTweets","useCallback","where","getDocs","querySnapshot","myTweetArr","Profile","bioText","setBioText","history","useHistory","signOut","push","Router","isSignedIn","exact","path","App","init","setInit","setIsSignedIn","setSignedInUser","onAuthStateChanged","user","href","title","rel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4621c5fb.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport 'css/Navigation.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHome, faUser } from '@fortawesome/free-solid-svg-icons';\n\nconst Navigation = ({ signedInUser }) => {\n  return (\n    <ul className=\"Navigation-box\">\n      <li className=\"Navigation-link\">\n        <Link to=\"/\">\n          <FontAwesomeIcon\n            icon={faHome}\n            size=\"2x\"\n            className=\"link-item\"\n            id=\"home-item\"\n          />{' '}\n          <span className=\"link-item\" id=\"home-item\">\n            홈\n          </span>\n        </Link>\n      </li>\n      <li className=\"Navigation-link\">\n        {signedInUser && (\n          <Link to=\"/profile\">\n            <FontAwesomeIcon icon={faUser} size=\"2x\" className=\"link-item\" />{' '}\n            <span className=\"link-item\">프로필</span>\n          </Link>\n        )}\n      </li>\n    </ul>\n  );\n};\n\nexport default Navigation;\n","import { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\n\ninitializeApp(firebaseConfig);\n\nexport const authService = getAuth();\nexport const dbService = getFirestore();\nexport const storageService = getStorage();\n","export default __webpack_public_path__ + \"static/media/google.9db27c10.png\";","export default __webpack_public_path__ + \"static/media/github.44eee0c4.png\";","import React from 'react';\nimport { authService } from 'myFirebase';\nimport {\n  signInWithPopup,\n  GoogleAuthProvider,\n  GithubAuthProvider\n} from '@firebase/auth';\n\nimport 'css/AuthFromSocial.css';\nimport Google from 'images/google.png';\nimport Github from 'images/github.png';\n\nconst AuthFromSocial = () => {\n  const onSocialClick = async event => {\n    let provider;\n\n    try {\n      if (event.target.name === 'google') provider = new GoogleAuthProvider();\n      if (event.target.name === 'github') provider = new GithubAuthProvider();\n      await signInWithPopup(authService, provider);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  return (\n    <div className=\"social-account\">\n      <div className=\"social\">\n        <img\n          onClick={onSocialClick}\n          name=\"google\"\n          src={Google}\n          alt=\"Google logo\"\n          aria-label=\"Continue with Google\"\n          width=\"40px\"\n          height=\"40px\"\n        />\n      </div>\n      <div className=\"social\">\n        <img\n          name=\"github\"\n          onClick={onSocialClick}\n          src={Github}\n          alt=\"Github logo\"\n          aria-label=\"Continue with Github\"\n          width=\"40px\"\n          height=\"40px\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AuthFromSocial;\n","export default __webpack_public_path__ + \"static/media/twitter.39708c25.png\";","import React, { useState } from 'react';\nimport {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword\n} from '@firebase/auth';\nimport { authService } from 'myFirebase';\nimport AuthFromSocial from 'components/AuthFromSocial';\n\nimport 'css/Auth.css';\nimport mainLogo from 'images/twitter.png';\n\nconst Auth = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState('');\n\n  const onInputChange = event => {\n    if (event.target.name === 'email') setEmail(event.target.value);\n    if (event.target.name === 'password') setPassword(event.target.value);\n  };\n\n  const toggleAccount = () => setNewAccount(prev => !prev);\n\n  const onSignInSubmit = async event => {\n    event.preventDefault();\n    setEmail('');\n    setPassword('');\n\n    try {\n      if (newAccount)\n        await createUserWithEmailAndPassword(authService, email, password);\n      if (!newAccount)\n        await signInWithEmailAndPassword(authService, email, password);\n    } catch (error) {\n      setError(error.message.slice(10));\n    }\n  };\n\n  return (\n    <div className=\"Auth\">\n      <div className=\"Auth-logo \">\n        <img src={mainLogo} alt=\"Clone Twitter\" width=\"100px\" height=\"100px\" />\n        <h1 className=\"Clone-Twitter\">Clone Twitter</h1>\n      </div>\n\n      <form className=\"form\" onSubmit={onSignInSubmit}>\n        <div className=\"account-form\">\n          <label className=\"label\" htmlFor=\"email\">\n            이메일\n          </label>\n          <input\n            className=\"account-input\"\n            id=\"email\"\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Email\"\n            value={email}\n            onChange={onInputChange}\n          />\n        </div>\n        <div className=\"account-form\">\n          <label className=\"label\" htmlFor=\"password\">\n            비밀번호\n          </label>\n          <input\n            className=\"account-input\"\n            id=\"password\"\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Password\"\n            value={password}\n            onChange={onInputChange}\n          />\n        </div>\n        <button className=\"btn btn-account\" type=\"submit\">\n          {newAccount ? '회원가입' : '로그인'}\n        </button>\n      </form>\n      <p className=\"error\">{error}</p>\n      <p className=\"account\" onClick={toggleAccount}>\n        {newAccount ? '로그인' : '회원가입'}\n      </p>\n      <p className=\"label socail-login\">다른 서비스로 로그인</p>\n      <AuthFromSocial />\n    </div>\n  );\n};\n\nexport default Auth;\n","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { dbService, storageService } from 'myFirebase';\nimport { addDoc, collection } from '@firebase/firestore';\nimport { ref, uploadString, getDownloadURL } from '@firebase/storage';\n\nimport 'css/CreateTweet.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faImage } from '@fortawesome/free-regular-svg-icons';\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\n\nconst CreateTweet = ({ signedInUser }) => {\n  const [tweet, setTweet] = useState('');\n  const [attachment, setAttachment] = useState('');\n\n  const onInputChange = event => {\n    setTweet(event.target.value);\n  };\n\n  const onTweetSubmit = async event => {\n    event.preventDefault();\n\n    let attachmentUrl = '';\n    if (attachment !== '') {\n      const attachmentRef = ref(\n        storageService,\n        `${signedInUser.uid}/${uuidv4()}`\n      );\n      const uploadImg = await uploadString(\n        attachmentRef,\n        attachment,\n        'data_url'\n      );\n      attachmentUrl = await getDownloadURL(uploadImg.ref);\n    }\n\n    await addDoc(collection(dbService, 'tweets'), {\n      text: tweet,\n      createdAt: Date.now(),\n      creatorId: signedInUser.uid,\n      attachmentUrl,\n      likes: 0\n    });\n\n    setTweet('');\n    setAttachment('');\n  };\n\n  const onImgClearClick = () => {\n    setAttachment(null);\n  };\n\n  const onFileChange = event => {\n    const selectedFile = event.target.files[0];\n    const reader = new FileReader();\n    reader.onloadend = event => {\n      setAttachment(event.target.result);\n    };\n    reader.readAsDataURL(selectedFile);\n  };\n\n  return (\n    <>\n      <form onSubmit={onTweetSubmit} className=\"tweet-form\">\n        <textarea\n          className=\"tweet-area\"\n          onChange={onInputChange}\n          value={tweet}\n          placeholder=\"무슨 일이 있었나요?\"\n          maxLength={120}\n          require=\"true\"\n        />\n\n        <div className=\"tweet-file\">\n          <label\n            className=\"input-img-label\"\n            htmlFor=\"tweet-img\"\n            aria-label=\"이미지 업로드\"\n          >\n            <FontAwesomeIcon icon={faImage} size=\"3x\" className=\"input-img\" />\n          </label>\n          <input\n            id=\"tweet-img\"\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={onFileChange}\n          />\n        </div>\n        {attachment && (\n          <div className=\"attachment-box\">\n            <img\n              src={attachment}\n              alt=\"Seleted file\"\n              className=\"attachment-img\"\n            />\n            <button\n              className=\"btn-control btn-cancel\"\n              type=\"button\"\n              onClick={onImgClearClick}\n            >\n              취소\n            </button>\n          </div>\n        )}\n        <button type=\"submit\" className=\"btn-send\">\n          <span className=\"visually-hidden\">발행</span>\n          <FontAwesomeIcon icon={faPencilAlt} size=\"lg\" className=\"submit\" />\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default CreateTweet;\n","import React, { useState } from 'react';\nimport { dbService, storageService } from 'myFirebase';\nimport { doc, updateDoc, deleteDoc } from 'firebase/firestore';\nimport { ref, deleteObject } from 'firebase/storage';\n\nimport 'css/Tweet.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faEdit } from '@fortawesome/free-regular-svg-icons';\n\nconst Tweet = ({ tweetObj, isOwner, signedInUser }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [newTweet, setNewTweet] = useState(tweetObj.text);\n\n  const onDeleteClick = async () => {\n    const OK = window.confirm('이 트윗을 삭제하시겠습니까?');\n    if (OK) {\n      await deleteDoc(doc(dbService, `tweets/${tweetObj.id}`));\n    }\n    if (OK && tweetObj.attachmentUrl) {\n      await deleteObject(ref(storageService, tweetObj.attachmentUrl));\n    }\n  };\n\n  const onToggleEditClick = () => setIsEditing(prev => !prev);\n  const onNewTweetClick = event => {\n    setNewTweet(event.target.value);\n  };\n\n  const onNewTweetSubmit = async event => {\n    event.preventDefault();\n    await updateDoc(doc(dbService, `tweets/${tweetObj.id}`), {\n      text: newTweet\n    });\n    setIsEditing(false);\n  };\n\n  const getTweetDate = () => {\n    const date = new Date(tweetObj.createdAt);\n    return `${date.getFullYear()}.${\n      date.getMonth() + 1\n    }.${date.getDate()} ${date.getHours()}:${date.getMinutes()}`;\n  };\n\n  return (\n    <div className=\"Tweet\">\n      {isEditing ? (\n        isOwner && (\n          <form className=\"edit-form\" onSubmit={onNewTweetSubmit}>\n            <textarea\n              className=\"edit-textarea\"\n              placeholder=\"내용을 수정하세요.\"\n              required\n              value={newTweet}\n              onChange={onNewTweetClick}\n            />\n            <div className=\"btn-edit-box\">\n              <button className=\"btn-control btn-okay\" type=\"submit\">\n                확인\n              </button>\n            </div>\n          </form>\n        )\n      ) : (\n        <div className=\"user-tweet\">\n          <div className=\"tweet-content\">\n            <img\n              className=\"Tweet-userImg\"\n              src={signedInUser.photoURL}\n              alt=\"User\"\n            />\n            <p className=\"Tweet-userName\">{signedInUser.displayName}</p>\n            <span className=\"tweet-date\">{getTweetDate()}</span>\n          </div>\n          <h4 className=\"tweet-text\">{tweetObj.text}</h4>\n          {tweetObj.attachmentUrl && (\n            <div className=\"selected-img-box\">\n              <img\n                className=\"selected-img\"\n                src={tweetObj.attachmentUrl}\n                alt=\"Selected file\"\n                width=\"150px\"\n                height=\"150px\"\n              />\n            </div>\n          )}\n        </div>\n      )}\n      {isOwner && (\n        <div className=\"btn-box\">\n          <button className=\"btn-edit\" onClick={onToggleEditClick}>\n            <FontAwesomeIcon icon={faEdit} size=\"1x\" className=\"btn-icon\" />\n            <span className=\"visually-hidden\">수정</span>\n          </button>\n          <button className=\"btn-delete\" onClick={onDeleteClick}>\n            <FontAwesomeIcon icon={faTrashAlt} size=\"1x\" className=\"btn-icon\" />\n            <span className=\"visually-hidden\">삭제</span>\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Tweet;\n","import React, { useState, useEffect } from 'react';\nimport { dbService } from 'myFirebase';\nimport { collection, query, onSnapshot, orderBy } from '@firebase/firestore';\nimport CreateTweet from 'components/CreateTweet';\nimport Tweet from 'components/Tweet';\n\nimport 'css/Home.css';\nimport mainLogo from 'images/twitter.png';\n\nconst Home = ({ signedInUser }) => {\n  const [tweetList, setTweetList] = useState([]);\n\n  useEffect(() => {\n    const tweets = query(\n      collection(dbService, 'tweets'),\n      orderBy('createdAt', 'desc')\n    );\n\n    const unsubscribe = onSnapshot(tweets, snapshot => {\n      const tweetArr = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setTweetList(tweetArr);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <div className=\"Clone-container Home\">\n      <div className=\"logo-box\">\n        <img\n          className=\"logo\"\n          src={mainLogo}\n          alt=\"Clone twitter\"\n          width=\"40px\"\n          height=\"40px\"\n        />\n      </div>\n      <CreateTweet signedInUser={signedInUser} />\n      <div className=\"TweetList\">\n        {tweetList.map(tweet => (\n          <Tweet\n            key={tweet.id}\n            tweetObj={tweet}\n            isOwner={tweet.creatorId === signedInUser.uid}\n            signedInUser={signedInUser}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useState } from 'react';\nimport { authService, dbService, storageService } from 'myFirebase';\nimport { updateProfile } from '@firebase/auth';\nimport { doc, setDoc } from '@firebase/firestore';\nimport { getDownloadURL, ref, uploadString } from '@firebase/storage';\n\nimport 'css/EditProfile.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faImage } from '@fortawesome/free-regular-svg-icons';\n\nconst EditProfile = ({ signedInUser, refreshUser }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [newPhotoURL, setNewPhotoURL] = useState('');\n  const [newDisplayName, setNewDisplayName] = useState(\n    signedInUser.displayName\n  );\n  const [userBio, setUserBio] = useState('');\n\n  const onImgChange = event => {\n    const selectedImg = event.target.files[0];\n    const reader = new FileReader();\n    reader.onloadend = event => {\n      setNewPhotoURL(event.target.result);\n    };\n    reader.readAsDataURL(selectedImg);\n  };\n\n  const onInputTextChange = event => {\n    if (event.target.name === 'name') setNewDisplayName(event.target.value);\n    if (event.target.name === 'bio') setUserBio(event.target.value);\n  };\n\n  const onFormSubmit = async event => {\n    event.preventDefault();\n\n    let attachmentUrl = '';\n    if (newPhotoURL !== '') {\n      const photoURLRef = ref(storageService, `${signedInUser.uid}`);\n      const uploadImg = await uploadString(\n        photoURLRef,\n        newPhotoURL,\n        'data_url'\n      );\n      attachmentUrl = await getDownloadURL(uploadImg.ref);\n      await updateProfile(authService.currentUser, {\n        photoURL: attachmentUrl\n      });\n      refreshUser();\n    }\n\n    if (signedInUser.displayName !== newDisplayName) {\n      await updateProfile(authService.currentUser, {\n        displayName: newDisplayName\n      });\n      refreshUser();\n      setIsEditing(false);\n    }\n\n    if (isEditing) {\n      await setDoc(doc(dbService, 'bio', signedInUser.uid), {\n        text: userBio,\n        creatorId: signedInUser.uid\n      });\n\n      setIsEditing(false);\n    }\n  };\n\n  const onToggleEditClick = () => {\n    setIsEditing(prev => !prev);\n  };\n\n  return (\n    <>\n      {isEditing && (\n        <div className=\"EditProfile\">\n          <form className=\"edit-form\" onSubmit={onFormSubmit}>\n            {newPhotoURL && (\n              <div className=\"preview-box\">\n                <img\n                  className=\"preview-userImg\"\n                  src={newPhotoURL}\n                  alt=\"Selected file\"\n                  width=\"100px\"\n                  height=\"100px\"\n                />\n              </div>\n            )}\n\n            <label\n              className=\"input-img-label edit-userImg\"\n              htmlFor=\"Profile-userImg\"\n              aria-label=\"사용자 이미지 업로드\"\n            >\n              <FontAwesomeIcon icon={faImage} size=\"3x\" className=\"input-img\" />\n            </label>\n            <input\n              id=\"Profile-userImg\"\n              type=\"file\"\n              accept=\"image/*\"\n              name=\"userImg\"\n              onChange={onImgChange}\n            />\n\n            <div className=\"edit-content\">\n              <div className=\"input-userName\">\n                <label className=\"label\" htmlFor=\"Profile-userName\">\n                  이름\n                </label>\n                <input\n                  id=\"Profile-userName\"\n                  type=\"text\"\n                  name=\"name\"\n                  required\n                  maxLength={8}\n                  value={newDisplayName}\n                  onChange={onInputTextChange}\n                />\n              </div>\n              <div className=\"input-userBio\">\n                <label className=\"label\" htmlFor=\"Profile-userBio\">\n                  자기소개\n                </label>\n                <input\n                  id=\"Profile-userBio\"\n                  type=\"text\"\n                  name=\"bio\"\n                  value={userBio}\n                  onChange={onInputTextChange}\n                  maxLength={30}\n                />\n              </div>\n            </div>\n            <button className=\"btn-control btn-save\" type=\"submit\">\n              저장\n            </button>\n          </form>\n        </div>\n      )}\n      <button\n        className=\"btn-control btn-edit-profile\"\n        onClick={onToggleEditClick}\n      >\n        {isEditing ? '취소' : '프로필 수정'}\n      </button>\n    </>\n  );\n};\n\nexport default EditProfile;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { dbService } from 'myFirebase';\nimport {\n  collection,\n  getDocs,\n  orderBy,\n  query,\n  where\n} from '@firebase/firestore';\n\nimport 'css/MyTweet.css';\n\nconst MyTweet = ({ signedInUser }) => {\n  const [myTweets, setMyTweets] = useState([]);\n\n  const getMyTweets = useCallback(async () => {\n    const tweets = query(\n      collection(dbService, 'tweets'),\n      where('creatorId', '==', signedInUser.uid),\n      orderBy('createdAt', 'desc')\n    );\n\n    const querySnapshot = await getDocs(tweets);\n    const myTweetArr = querySnapshot.docs.map(doc => ({\n      id: doc.data().createdAt,\n      text: doc.data().text\n    }));\n    setMyTweets(myTweetArr);\n  }, [signedInUser.uid]);\n\n  useEffect(() => {\n    getMyTweets();\n  }, [getMyTweets]);\n  return (\n    <div className=\"MyTweet\">\n      {myTweets.map(tweet => (\n        <div className=\"tweet-mine\">\n          <p className=\"tweet-mine-text\" key={tweet.id}>\n            {tweet.text}\n          </p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default MyTweet;\n","import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router';\n\nimport { authService, dbService } from 'myFirebase';\nimport { signOut } from '@firebase/auth';\nimport { doc, onSnapshot } from '@firebase/firestore';\nimport EditProfile from 'components/EditProfile';\nimport MyTweet from 'components/MyTweet';\n\nimport mainLogo from 'images/twitter.png';\nimport 'css/Profile.css';\n\nconst Profile = ({ signedInUser, refreshUser }) => {\n  const [bioText, setBioText] = useState('');\n\n  const history = useHistory();\n  const onLogoutClick = () => {\n    signOut(authService);\n    history.push('/');\n  };\n\n  useEffect(() => {\n    const unsubscribe = onSnapshot(\n      doc(dbService, 'bio', signedInUser.uid),\n      doc => {\n        if (!doc.data()) return;\n        setBioText(doc.data().text);\n      }\n    );\n    return () => unsubscribe();\n  }, [signedInUser.uid]);\n\n  return (\n    <div className=\"Profile Clone-container\">\n      <div className=\"Profile-userContent\">\n        <img\n          className=\"Profile-userImg\"\n          src={signedInUser.photoURL ? signedInUser.photoURL : mainLogo}\n          alt={signedInUser.displayName}\n        />\n        <div className=\"Profile-userText\">\n          <p className=\"Profile-userName\">{signedInUser.displayName}</p>\n          <p className=\"Profile-userBio\">{bioText}</p>\n        </div>\n      </div>\n      <EditProfile signedInUser={signedInUser} refreshUser={refreshUser} />\n      <MyTweet signedInUser={signedInUser} />\n      <button\n        className=\"btn-control btn-signOut\"\n        type=\"submit\"\n        onClick={onLogoutClick}\n      >\n        로그아웃\n      </button>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport Navigation from 'components/Navigation';\nimport Auth from 'routes/Auth';\nimport Home from 'routes/Home';\nimport Profile from 'routes/Profile';\n\nconst Router = ({ isSignedIn, signedInUser, refreshUser }) => {\n  return (\n    <>\n      <HashRouter>\n        <Switch>\n          {isSignedIn ? (\n            <>\n              <Navigation signedInUser={signedInUser} />\n              <Route exact path=\"/\">\n                <Home signedInUser={signedInUser} />\n              </Route>\n              <Route exact path=\"/profile\">\n                <Profile\n                  signedInUser={signedInUser}\n                  refreshUser={refreshUser}\n                />\n              </Route>\n            </>\n          ) : (\n            <Route exact path=\"/\">\n              <Auth />\n            </Route>\n          )}\n        </Switch>\n      </HashRouter>\n    </>\n  );\n};\n\nexport default Router;\n","import React, { useEffect, useState } from 'react';\nimport Router from 'components/Router';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { authService } from 'myFirebase';\n\nimport 'css/App.css';\nimport mainLogo from 'images/twitter.png';\n\nconst App = () => {\n  const [init, setInit] = useState(false);\n  const [isSignedIn, setIsSignedIn] = useState(false);\n  const [signedInUser, setSignedInUser] = useState(null);\n\n  useEffect(() => {\n    onAuthStateChanged(authService, user => {\n      if (user) {\n        setIsSignedIn(true);\n        setSignedInUser({\n          displayName: authService.currentUser.displayName\n            ? authService.currentUser.displayName\n            : 'Anonymous',\n          uid: authService.currentUser.uid,\n          photoURL: authService.currentUser.photoURL\n        });\n      } else {\n        setIsSignedIn(false);\n        setSignedInUser(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    setSignedInUser({\n      displayName: authService.currentUser.displayName,\n      uid: authService.currentUser.uid,\n      photoURL: authService.currentUser.photoURL\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      {init ? (\n        <Router\n          isSignedIn={isSignedIn}\n          signedInUser={signedInUser}\n          refreshUser={refreshUser}\n        />\n      ) : (\n        <div className=\"init\">\n          <img src={mainLogo} alt=\"logo\" width=\"50px\" height=\"50px\" />\n          <p className=\"init-text\">Initailizing...</p>\n        </div>\n      )}\n\n      <footer className=\"footer\">\n        <p>&copy; 2021 CloneTwitter</p>\n        <div>\n          Icons made by{' '}\n          <a\n            href=\"https://www.freepik.com\"\n            title=\"Freepik\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            Freepik{' '}\n          </a>\n          from{' '}\n          <a\n            href=\"https://www.flaticon.com/\"\n            title=\"Flaticon\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            www.flaticon.com\n          </a>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}